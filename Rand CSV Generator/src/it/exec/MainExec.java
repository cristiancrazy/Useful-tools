/****************************************
 | Author: Cristian Capraro
 | Date: November 2021
 | Personal Project, under MIT LICENCE
 | 
 | This application allows you to create
 | and export vectors/matrices on a CSV
 | file.
 |
 | This class contains the MAIN method
 ****************************************/

package it.exec;


//IMPORT
import java.awt.*;
import java.awt.event.ActionListener;

import it.graphics.*;
import it.graphics.WinFrameGen.e_mode;
import it.tools.*;


//CLASS
public class MainExec{
    
    //CONSTANTS

    /***************************************************
     * This constant represents the highest number of
     * elements (INTEGER) that can be generated by this
     * application (single validation).
     * 
     * The highest number for DOUBLE option is
     * (maxValueGenerated)/2
     **************************************************/
    final static long maxValueGenerated = Integer.MAX_VALUE;


    //The heart of this application
    private static String Computefunctionality(String path, String elementsN, long min, long max, boolean integerMode, boolean doubleMode, boolean positive_only, boolean erase){ 
        String state = "OK";
        //ERASE FILE
        
        if((erase)){ //ERASE FILE
            Tools.resultErase(path);
        }

        //Check if the value (user input) is valid with a REGEX
        if(elementsN.matches("\\d{1,}")){


            if(integerMode){ //INTEGER

                if(Long.parseLong(elementsN) > maxValueGenerated){ //MAX VALUE REACHED
                    return "MAX VAL: " + (maxValueGenerated);
                }

                Tools.resultWriter(path, Generator.getDataLONG(Long.parseLong(elementsN), min, max, positive_only), true);
            }

            if(doubleMode){ //DOUBLE

                if(Long.parseLong(elementsN) > maxValueGenerated/2){ //MAX VALUE REACHED
                    return "MAX VAL: " + (maxValueGenerated/2);
                }

                Tools.resultWriter(path, Generator.getDataDOUBLE(Long.parseLong(elementsN), min, max, positive_only), true);
            }
            
        }else{
            if(!elementsN.isEmpty()) state = "INVALID FORMAT";
        }

        System.gc(); //Suggest to execute Garbage Collection

        return state; //Return status

    }



    private static WinFrameGen WindowMAIN(){ //GUI SETUP [WINDOW "MAIN"]
        //GUI SETUP
        WinFrameGen mainFrame = new WinFrameGen("vcmt rand", false, 250, 250, e_mode.EXIT);
        mainFrame.setColor(Color.black, Color.red);
        
        /* =========== [COMPONENTS] =========== */
        
        //Checkbox
        Checkbox[] Selection = new Checkbox[]{
            new Checkbox("INTEGER"),    //0
            new Checkbox("DOUBLE"),     //1
        };

        int h_chkbox = 50; //Set size
        for(Checkbox i : Selection){
            i.setLocation(25,(h_chkbox+=25));
            i.setSize(120, 20);
        }
        
        Checkbox Erase = new Checkbox("ERASE FILE");
        Erase.setBounds(145, 75, 100, 20);
        Erase.setForeground(Color.YELLOW);
        
        //TextBox
        Label num_label = new Label("Number of Elements: ");
        num_label.setBounds(20, 125, 120, 25);
                
        TextField num_field = new TextField(null);
        num_field.setBounds(20, 150, 120, 25);
        
        //Submit button
        Button submitButton = new Button("Validate");
        submitButton.setBackground(Color.BLACK);
        submitButton.setForeground(Color.GREEN);
        submitButton.setBounds(20, 175, 120, 25);
        
        //Info label
        Label res_label = new Label();
        res_label.setBounds(20, 200, 120, 25);
        res_label.setForeground(Color.BLUE);
        res_label.setBackground(Color.BLACK);

        submitButton.addActionListener(i ->{
            String res = Computefunctionality( "results.csv", num_field.getText(), 1, 500, Selection[0].getState(), Selection[1].getState(), false, Erase.getState() );
            res_label.setText(res);
        }); 

        //Adding all these components to the frame
        mainFrame.addMultipleComponents(Selection[0], Selection[1], Erase, num_label, num_field, res_label, submitButton);

        System.gc(); //Suggest to execute Garbage Collection

        return mainFrame;
    }

    private static WinFrameGen WindowABOUT(){ //GUI SETUP [WINDOW "ABOUT"]
        
        WinFrameGen aboutFrame = new WinFrameGen("About", false, 250, 250, e_mode.HIDE);
        aboutFrame.setColor(Color.BLACK, Color.RED); //Set frame colors
        
        /* =========== [COMPONENTS] =========== */
        
        //Label
        Label info[] = new Label[6];
        info[0] = new Label("Written by Cristian Capraro.");
        info[0].setForeground(new Color(0xFF, 0xFF, 0xFF)); //Set Text Color

        info[1] = new Label("[Under MIT Licence]");
        info[1].setForeground(Color.YELLOW); //Set Text Color

        info[2] = new Label("Version: 1.0");

        info[3] = new Label("Utility app: generate and");
        info[3].setForeground(Color.GREEN); //Set Text Color

        info[4] = new Label("export random values on a .csv file.");
        info[4].setForeground(Color.GREEN); //Set Text Color
        
        info[5] = new Label("github.com/cristiancrazy");
        info[5].setForeground(Color.CYAN); //Set Text Color
        
        int h_infoLbl = 60;  //Start label height
        for(Label i : info){ //Placing on Frame
            i.setBounds(25, h_infoLbl, 200, 25);
            i.setAlignment(Label.CENTER);
            h_infoLbl += 25; //Increment height for next label
        }
        aboutFrame.addMultipleComponents(info);


        return aboutFrame;
    }

    //TODO: IMPLENT "SETTINGS" WINDOW
    private static WinFrameGen WindowSETTINGS(){ //GUI SETUP [WINDOW "SETTINGS"]

        WinFrameGen settingsFrame = new WinFrameGen("Settings", false, 250, 250, e_mode.HIDE);
        settingsFrame.setColor(Color.BLACK, Color.RED); //Set frame colors
        
        /* =========== [COMPONENTS] =========== */

        //Label
        Label title_label = new Label("Settings:");
        title_label.setFont(new Font("Arial", Font.BOLD, 16));
        title_label.setBounds(0, 35, 250, 25);
        title_label.setAlignment(Label.CENTER);

        Label[] setVal_label = new Label[]{
            new Label("MIN VALUE:"),
            new Label("MAX VALUE:"),
            new Label("SEPARATOR: ")
        };
        int hVal = 50;
        for(Label i : setVal_label){
            i.setBounds(25, (hVal+=35), 75, 25);
        }

        //TextFields
        TextField[] setVal_fields = new TextField[]{
            new TextField(),
            new TextField()
        };

        hVal = 50;
        for(TextField i : setVal_fields){
            i.setBounds(120, (hVal+=35), 100, 25);
            
        }

        //Radio checkbox
        CheckboxGroup separatorType = new CheckboxGroup();
        
        Checkbox separator1 = new Checkbox(";", separatorType, true);
        separator1.setForeground(Color.WHITE);
        separator1.setFont(new Font("Arial", Font.PLAIN, 16));
        separator1.setBounds(120, 155, 25, 25);

        Checkbox separator2 = new Checkbox(",", separatorType, false);
        separator2.setForeground(Color.WHITE);
        separator2.setFont(new Font("Arial", Font.PLAIN, 16));
        separator2.setBounds(160, 155, 25, 25);
        
        settingsFrame.addMultipleComponents(title_label, separator1, separator2);
        settingsFrame.addMultipleComponents(setVal_label);
        settingsFrame.addMultipleComponents(setVal_fields);


        return settingsFrame; 
    }


    //MAIN METHOD
    public static void main(String[] args){
        
        //FRAMES
        WinFrameGen mainFrame = WindowMAIN();
        WinFrameGen aboutFrame = WindowABOUT();
        WinFrameGen settingsFrame = WindowSETTINGS();

        //MENU BAR
        mainFrame = WinFrameGen.addMenuBar(false, mainFrame, "Config", 
                    new String[]{"Settings", "Exit"}, new ActionListener[]{i -> settingsFrame.setVisible(true), i -> System.exit(0)});

        mainFrame = WinFrameGen.addMenuBar(true, mainFrame, "?", 
                    new String[]{"About"}, new ActionListener[]{i -> aboutFrame.setVisible(true)});
        
    
        mainFrame.setVisible(true);

    }
}